/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package name.dougmcneil.plsql.ui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import static java.lang.Boolean.FALSE;
import static java.lang.Boolean.TRUE;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.Mode;
import static org.openide.windows.TopComponent.PROP_CLOSING_DISABLED;
import static org.openide.windows.TopComponent.PROP_DRAGGING_DISABLED;
import static org.openide.windows.TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN;
import static org.openide.windows.TopComponent.PROP_MAXIMIZATION_DISABLED;
import static org.openide.windows.TopComponent.PROP_SLIDING_DISABLED;
import static org.openide.windows.TopComponent.PROP_UNDOCKING_DISABLED;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@TopComponent.Description(
        preferredID = "PLSQLParametersTopComponent",
        iconBase = "name/dougmcneil/plsql/resources/plsql.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
//@ActionID(category = "Window", id = "name.dougmcneil.plsql.ui.PLSQLParametersTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_PLSQLParametersAction",
//        preferredID = "PLSQLParametersTopComponent"
//)
@Messages({
    "CTL_PLSQLParametersAction=PLSQLParameters",
    "# {0} - title",
    "CTL_PLSQLParametersTopComponent=PL/SQL Parameters {0}",
    "HINT_PLSQLParametersTopComponent=Persisted substitution parameters for PL/SQL execution.",
    "LBL_Name_Column=Parameter",
    "LBL_VALUE_Column=Value"
})
public final class PLSQLParametersTopComponent extends TopComponent {
    
    private static String _title;

    public PLSQLParametersTopComponent() {
        initComponents();
    }
    
    public PLSQLParametersTopComponent applyConfiguration(String title) {
        _title = title;
        setName(Bundle.CTL_PLSQLParametersTopComponent(truncateTitle(_title)));
        setToolTipText(Bundle.HINT_PLSQLParametersTopComponent());
        WindowManager mgr = WindowManager.getDefault();
        Mode mode = mgr.findMode("rightSlidingSide");
        mode.dockInto(this);
        putClientProperty(PROP_CLOSING_DISABLED, TRUE);
        putClientProperty(PROP_DRAGGING_DISABLED, FALSE);
        putClientProperty(PROP_MAXIMIZATION_DISABLED, TRUE);
        putClientProperty(PROP_UNDOCKING_DISABLED, TRUE);
        putClientProperty(PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, TRUE);
        putClientProperty(PROP_SLIDING_DISABLED, TRUE);
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableParameters = new javax.swing.JTable();

        jTableParameters.setModel(getTableModel());
        jTableParameters.setDoubleBuffered(true);
        jTableParameters.setRowHeight(20);
        setCellEditors();
        jScrollPane1.setViewportView(jTableParameters);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableParameters;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {

        String x = "10";
    }

    private TableModel getTableModel() {
        ParameterTableModel model = new ParameterTableModel();
        return model;
    }
    
    private void setCellEditors() {
        ParameterTableModel model = (ParameterTableModel) jTableParameters.getModel();
        TableColumn column = jTableParameters.getColumnModel().getColumn(0);
        column.setCellEditor(new ParameterCellEditor(model, 0));
        column = jTableParameters.getColumnModel().getColumn(1);
        column.setCellEditor(new ParameterCellEditor(model, 1));
        
    }
    private String truncateTitle(String title) {
        return title.substring(title.lastIndexOf('\\') + 1, title.length());
    }
    
    private class ParameterTableModel extends DefaultTableModel implements ActionListener {
        
        private Class<?>[] _types = new Class<?>[] { Type.class, Type.class};
        
        private String[] _colNames = {Bundle.LBL_Name_Column(), Bundle.LBL_VALUE_Column()};
        
        Type[][] _data = {
                {new Parameter(1), new Value("")}, {new Parameter(2), new Value("")}, 
                    {new Parameter(3), new Value("")}, {new Parameter(4), new Value("")}, 
                    {new Parameter(5), new Value("")}, {new Parameter(6), new Value("")},
                    {new Parameter(7), new Value("")}, {new Parameter(8), new Value("")},
                    {new Parameter(9), new Value("")}, {new Parameter(10), new Value("")}            
        };
        
        ComboBoxModel[][] _models = {{
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>()}, {
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>(),
            new DefaultComboBoxModel<Type>(), new DefaultComboBoxModel<Type>()}};
        
        ParameterTableModel() {
            setDataVector(_data, _colNames);
        }
        
        @Override
        public int getRowCount() {
            return 10;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }
        
        @Override
        public String getColumnName(int col) {
            return _colNames[col];
        }
        
        @Override
        public Class<?> getColumnClass(int col) {
            return _types[col];
        }
        
        public boolean isCellEditable(int row, int col) {
            return true;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return _data[rowIndex][columnIndex];
        }

        @Override
        public void actionPerformed(ActionEvent e) {
           if ("comboBoxEdited".equals(e.getActionCommand())) {
                ParameterCellEditor.TableComboBox box = (ParameterCellEditor.TableComboBox)e.getSource();
                DefaultComboBoxModel<Type> model = (DefaultComboBoxModel<Type>)box.getModel();
                Object selected = box.getSelectedItem();
                int i = model.getSize() - 1;
                for (; i >= 0; i--) {
                    if (selected.equals(model.getElementAt(i))) {
                        box.setSelectedItem(selected);
                        return;
                    }
                }
                if (selected.toString().equals("")) {
                    box.removeItem(box._last);
                    if (box.getItemCount() >= 1) {
                        box.setSelectedIndex(0);
                    } else {
                        box._model._data[box._row][box._col].setContent(null);
                    }
                    return;
                }
                //model.addElement(selected);
                selected = Type.promote(selected, box._col);
                box.addItem((Type) selected);
                box.setSelectedItem(selected);
            }
        }
    }
    
    static class ParameterCellEditor extends DefaultCellEditor {
        TableComboBox _box;
        ComboBoxModel<Type>[] _models;
        ParameterCellEditor(ParameterTableModel model, int col) {
            super(new TableComboBox(model, col));
            _box = (TableComboBox) this.getComponent();
            _box.addActionListener(model);
            _box.setEditable(true);
            _models = model._models[col];
        }
        
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, 
                boolean isSelected, int row, int column)  {
            _box.setModel(_models[row]);
            _box.setRow(row);
            Component comp = super.getTableCellEditorComponent(table, value, isSelected, row, column);
            return comp;
            
        }
        static class TableComboBox extends JComboBox<Type> {

            private final ParameterTableModel _model;
            private final int _col;
            private int _row;
            private Type _last;
            public TableComboBox(ParameterTableModel model, int col) {
                _model = model;
                _col = col;
            }
            
            void setRow(int row) {
                _row = row;
            }

            @Override
            public void setSelectedItem(Object item) {
                item = Type.promote(item, _col);
                super.setSelectedItem(item);
                if (getSelectedIndex() == -1) {
                    return;
                }
                _last = (Type) item;
                _model._data[_row][_col].setContent(((Type) item).getContent());
            }

        }
    
    }
    private static class Data implements Serializable {
        public static final long serialVersionUID = 1l;
        
        String [][] getActive() {
            return new String[][] { 
                {"&1", null}, {"&2", null}, {"3", null}, {"4", null}, {"5", null},
                {"6", null}, {"7", null}, {"8", null}, {"9", null}, {"10", null} };
        }
        
    }
    
    private abstract static class Type {
        private String _content;
        
        public Type(String content) {
            _content = content;
        }
        
        public String getContent() {
            return _content;
        }
        
        public void setContent(String content) {
            _content = content;
        }
        
        public String toString() {
            return _content;
        }
        
        public static Type promote(Object candidate, int col) {
            if (candidate instanceof Type) {
                return (Type) candidate;
            }
            if (col == 0) {
                return new Parameter((String) candidate);
            }
            return new Value((String) candidate);
        }
    }
    
    private static class Parameter extends Type {
        private int _pos;
        public Parameter(String content) {
            super(content);
            _pos = Integer.parseInt(content.substring(1));
        }
        
        public Parameter(int pos) {
            super("&" + pos);
            _pos = pos;
        }
        
        public void setContent(String content) {
            if (content == null || content.length() == 0) {
                content = "&" + _pos;
            }
            super.setContent(content);
        }
    }
    
    private static class Value extends Type {
        public Value(String content) {
            super(content);
        }
    }
}
